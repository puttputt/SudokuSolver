<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_14) on Wed Apr 07 21:23:03 CST 2010 -->
<TITLE>
Grid
</TITLE>

<META NAME="date" CONTENT="2010-04-07">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Grid";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../sudoku/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Grid.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../sudoku/Node.html" title="class in sudoku"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?sudoku/Grid.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Grid.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
sudoku</FONT>
<BR>
Class Grid</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>sudoku.Grid</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Grid</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
This is the main class of the game. It initialises, solves and also displays
 the results in the console. Even though we have already switched to the GUI
 for the display. It contains a Linked List of nodes which keeps the
 information of each node in the game.
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Pooya Sami & Kyle Smyth</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../sudoku/Grid.html#Grid()">Grid</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default Constructor It creates the whole grid with 0's inserted and also
 creates the empty possibilities for each node.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../sudoku/Grid.html#Grid(sudoku.Grid)">Grid</A></B>(<A HREF="../sudoku/Grid.html" title="class in sudoku">Grid</A>&nbsp;original)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy Constructor It creates a copy of a grid</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#bruteSolve()">bruteSolve</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A brute force, backtracking method to solve advanced puzzles: It checks
 the values in the emptyCells, if it's equal to 9 it goes to the node
 before that and increases its value by 1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#checkCol(int, int)">checkCol</A></B>(int&nbsp;index,
         int&nbsp;number)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checks the column of the given index for the value</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#CheckGrid(int, int)">CheckGrid</A></B>(int&nbsp;index,
          int&nbsp;number)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks is the number exists in the grid of the Node we want</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#checkRow(int, int)">checkRow</A></B>(int&nbsp;index,
         int&nbsp;number)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks the row of the given index for the number we need</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#colConsistent(int)">colConsistent</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks to see if the column is consistent, meaning that there are no
 repeating integers</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#FindColFirstIndex(int)">FindColFirstIndex</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finds the first index of the column</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#FindGridFirstIndex(int)">FindGridFirstIndex</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds the first index of the sub-grid</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#FindGridIndex(int)">FindGridIndex</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the Grid number according to the following grid map 1|2|3 -+-+-
 4|5|6 -+-+- 7|8|9</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#FindRowFirstIndex(int)">FindRowFirstIndex</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the first index of the row</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#getCount()">getCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Getter method for the "count".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.LinkedList&lt;java.lang.Integer&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#getEmptyCells()">getEmptyCells</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used by the brute force method, it gathers the empty cells together.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.LinkedList&lt;<A HREF="../sudoku/Node.html" title="class in sudoku">Node</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#getGrid()">getGrid</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Getter method for the "grid".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#gridConsistent(int)">gridConsistent</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks to see if the sub-grid is consistent, meaning that there are no
 repeating integers</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#Import(java.lang.String)">Import</A></B>(java.lang.String&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the filename that contains the puzzle and imports it to the game.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#rowConsistent(int)">rowConsistent</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks to see if the row is consistent, meaning that there are no
 repeating integers</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#setCount(int)">setCount</A></B>(int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setter method for the count</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#SimpleFillValuesRecursive()">SimpleFillValuesRecursive</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a recursive method for solving simple puzzles.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#Update(int)">Update</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the possibilities according to the value of the index given</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#UpdateColumn(int)">UpdateColumn</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the possibilities of the column according to the value of the
 index given (checks the value of the given node and updates according to
 that).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#UpdateRow(int)">UpdateRow</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the possibilities of the row according to the value of the index
 given (checks the value of the given node and updates according to that).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#UpdateSubGrid(int)">UpdateSubGrid</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates the possibilities of the sub grid according to the value of the
 index given.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../sudoku/Grid.html#YouWin()">YouWin</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It prints out a YouWin message in the console when all the nodes are full</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Grid()"><!-- --></A><H3>
Grid</H3>
<PRE>
public <B>Grid</B>()</PRE>
<DL>
<DD>Default Constructor It creates the whole grid with 0's inserted and also
 creates the empty possibilities for each node.
<P>
</DL>
<HR>

<A NAME="Grid(sudoku.Grid)"><!-- --></A><H3>
Grid</H3>
<PRE>
public <B>Grid</B>(<A HREF="../sudoku/Grid.html" title="class in sudoku">Grid</A>&nbsp;original)</PRE>
<DL>
<DD>Copy Constructor It creates a copy of a grid
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="FindGridIndex(int)"><!-- --></A><H3>
FindGridIndex</H3>
<PRE>
public int <B>FindGridIndex</B>(int&nbsp;index)</PRE>
<DL>
<DD>Returns the Grid number according to the following grid map 1|2|3 -+-+-
 4|5|6 -+-+- 7|8|9
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the node (0-80)
<DT><B>Returns:</B><DD>Grid Number and -1 if the index is out of bounds</DL>
</DD>
</DL>
<HR>

<A NAME="Import(java.lang.String)"><!-- --></A><H3>
Import</H3>
<PRE>
public void <B>Import</B>(java.lang.String&nbsp;filename)</PRE>
<DL>
<DD>Gets the filename that contains the puzzle and imports it to the game.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - name of the file</DL>
</DD>
</DL>
<HR>

<A NAME="FindGridFirstIndex(int)"><!-- --></A><H3>
FindGridFirstIndex</H3>
<PRE>
public int <B>FindGridFirstIndex</B>(int&nbsp;index)</PRE>
<DL>
<DD>Finds the first index of the sub-grid
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - of the Node
<DT><B>Returns:</B><DD>returns the first index of the sub-grid</DL>
</DD>
</DL>
<HR>

<A NAME="CheckGrid(int, int)"><!-- --></A><H3>
CheckGrid</H3>
<PRE>
public boolean <B>CheckGrid</B>(int&nbsp;index,
                         int&nbsp;number)</PRE>
<DL>
<DD>Checks is the number exists in the grid of the Node we want
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the Node<DD><CODE>number</CODE> - the number we want to search for it
<DT><B>Returns:</B><DD>true if it exists</DL>
</DD>
</DL>
<HR>

<A NAME="FindRowFirstIndex(int)"><!-- --></A><H3>
FindRowFirstIndex</H3>
<PRE>
public int <B>FindRowFirstIndex</B>(int&nbsp;index)</PRE>
<DL>
<DD>Returns the first index of the row
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the Node
<DT><B>Returns:</B><DD>first index of the row</DL>
</DD>
</DL>
<HR>

<A NAME="checkRow(int, int)"><!-- --></A><H3>
checkRow</H3>
<PRE>
public boolean <B>checkRow</B>(int&nbsp;index,
                        int&nbsp;number)</PRE>
<DL>
<DD>Checks the row of the given index for the number we need
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the Node<DD><CODE>number</CODE> - the value
<DT><B>Returns:</B><DD>true if the number exists in the row</DL>
</DD>
</DL>
<HR>

<A NAME="FindColFirstIndex(int)"><!-- --></A><H3>
FindColFirstIndex</H3>
<PRE>
public int <B>FindColFirstIndex</B>(int&nbsp;index)</PRE>
<DL>
<DD>finds the first index of the column
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the Node
<DT><B>Returns:</B><DD>first index of the column</DL>
</DD>
</DL>
<HR>

<A NAME="checkCol(int, int)"><!-- --></A><H3>
checkCol</H3>
<PRE>
public boolean <B>checkCol</B>(int&nbsp;index,
                        int&nbsp;number)</PRE>
<DL>
<DD>checks the column of the given index for the value
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - index of the Node<DD><CODE>number</CODE> - the number we're searching for
<DT><B>Returns:</B><DD>true if the number exists in the column</DL>
</DD>
</DL>
<HR>

<A NAME="Update(int)"><!-- --></A><H3>
Update</H3>
<PRE>
public void <B>Update</B>(int&nbsp;index)</PRE>
<DL>
<DD>Updates the possibilities according to the value of the index given
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index</DL>
</DD>
</DL>
<HR>

<A NAME="UpdateRow(int)"><!-- --></A><H3>
UpdateRow</H3>
<PRE>
public void <B>UpdateRow</B>(int&nbsp;index)</PRE>
<DL>
<DD>Updates the possibilities of the row according to the value of the index
 given (checks the value of the given node and updates according to that).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index</DL>
</DD>
</DL>
<HR>

<A NAME="UpdateColumn(int)"><!-- --></A><H3>
UpdateColumn</H3>
<PRE>
public void <B>UpdateColumn</B>(int&nbsp;index)</PRE>
<DL>
<DD>Updates the possibilities of the column according to the value of the
 index given (checks the value of the given node and updates according to
 that).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index</DL>
</DD>
</DL>
<HR>

<A NAME="UpdateSubGrid(int)"><!-- --></A><H3>
UpdateSubGrid</H3>
<PRE>
public void <B>UpdateSubGrid</B>(int&nbsp;index)</PRE>
<DL>
<DD>Updates the possibilities of the sub grid according to the value of the
 index given. (checks the value of the given node and updates according to
 that)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index</DL>
</DD>
</DL>
<HR>

<A NAME="SimpleFillValuesRecursive()"><!-- --></A><H3>
SimpleFillValuesRecursive</H3>
<PRE>
public void <B>SimpleFillValuesRecursive</B>()</PRE>
<DL>
<DD>a recursive method for solving simple puzzles. it looks for the nodes
 with only one possibility and continues until there aren't any
 "one possibility" node left.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getEmptyCells()"><!-- --></A><H3>
getEmptyCells</H3>
<PRE>
public java.util.LinkedList&lt;java.lang.Integer&gt; <B>getEmptyCells</B>()</PRE>
<DL>
<DD>Used by the brute force method, it gathers the empty cells together.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>returns the linked list of empty cells</DL>
</DD>
</DL>
<HR>

<A NAME="bruteSolve()"><!-- --></A><H3>
bruteSolve</H3>
<PRE>
public boolean <B>bruteSolve</B>()</PRE>
<DL>
<DD>A brute force, backtracking method to solve advanced puzzles: It checks
 the values in the emptyCells, if it's equal to 9 it goes to the node
 before that and increases its value by 1. and keeps doing this until the
 game is finished. It also checks if the inserted value is consistent with
 the rest of the table, then proceeds to the next empty cell.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="rowConsistent(int)"><!-- --></A><H3>
rowConsistent</H3>
<PRE>
public boolean <B>rowConsistent</B>(int&nbsp;index)</PRE>
<DL>
<DD>Checks to see if the row is consistent, meaning that there are no
 repeating integers
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index
<DT><B>Returns:</B><DD>returns true if the value of the index does not conflict with the
         row rule of the game</DL>
</DD>
</DL>
<HR>

<A NAME="colConsistent(int)"><!-- --></A><H3>
colConsistent</H3>
<PRE>
public boolean <B>colConsistent</B>(int&nbsp;index)</PRE>
<DL>
<DD>Checks to see if the column is consistent, meaning that there are no
 repeating integers
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index
<DT><B>Returns:</B><DD>returns true if the value of the index does not conflict with the
         column rule of the game</DL>
</DD>
</DL>
<HR>

<A NAME="gridConsistent(int)"><!-- --></A><H3>
gridConsistent</H3>
<PRE>
public boolean <B>gridConsistent</B>(int&nbsp;index)</PRE>
<DL>
<DD>Checks to see if the sub-grid is consistent, meaning that there are no
 repeating integers
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>index</CODE> - the reference index
<DT><B>Returns:</B><DD>returns true if the value of the index does not conflict with the
         grid rule of the game</DL>
</DD>
</DL>
<HR>

<A NAME="YouWin()"><!-- --></A><H3>
YouWin</H3>
<PRE>
public boolean <B>YouWin</B>()</PRE>
<DL>
<DD>It prints out a YouWin message in the console when all the nodes are full
<P>
<DD><DL>

<DT><B>Returns:</B><DD>returns true if the game is finished.</DL>
</DD>
</DL>
<HR>

<A NAME="getGrid()"><!-- --></A><H3>
getGrid</H3>
<PRE>
public java.util.LinkedList&lt;<A HREF="../sudoku/Node.html" title="class in sudoku">Node</A>&gt; <B>getGrid</B>()</PRE>
<DL>
<DD>Getter method for the "grid".
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the grid</DL>
</DD>
</DL>
<HR>

<A NAME="getCount()"><!-- --></A><H3>
getCount</H3>
<PRE>
public int <B>getCount</B>()</PRE>
<DL>
<DD>Getter method for the "count".
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the count</DL>
</DD>
</DL>
<HR>

<A NAME="setCount(int)"><!-- --></A><H3>
setCount</H3>
<PRE>
public void <B>setCount</B>(int&nbsp;count)</PRE>
<DL>
<DD>Setter method for the count
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>count</CODE> - the new value of the count</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../sudoku/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Grid.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../sudoku/Node.html" title="class in sudoku"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?sudoku/Grid.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Grid.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
